{"version":3,"sources":["contexts/constants.ts","contexts/Three.tsx","App.tsx","index.tsx"],"names":["LOOK_AT_PIZZA","initialState","previousRAF","undefined","renderer","scene","camera","controls","domElement","player","entities","sceneLoaded","something","ThreeContext","createContext","reducer","state","action","type","ThreeProvider","children","useReducer","dispatch","useEffect","path","FBXLoader","load","object","console","log","add","value","Provider","useThreeScene","useState","setPreviousRAF","context","useContext","Error","initScene","useCallback","THREE","width","window","innerWidth","height","innerHeight","windowAspect","setSize","physicallyCorrectLights","outputEncoding","x","y","z","position","set","OrbitControls","autoRotate","update","light","ambient","geometry","material","color","cube","document","body","appendChild","RAF","requestAnimationFrame","t","_previousRAF","timeElapsed","timeElapsedS","Math","min","step","render","setTimeout","cancelAnimationFrame","App","className","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.25f13d89.chunk.js","sourcesContent":["export const LOOK_AT_PIZZA = {\r\n  x: 222.7602875579686,\r\n  y: 27.229914306258113,\r\n  z: 96.46833223600909,\r\n};\r\n\r\nexport const PIZZA_FBX = \"pizza_fbx/source/PIZZA.fbx\";\r\n","import { useEffect } from \"react\";\r\nimport { createContext, useContext, useReducer } from \"react\";\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport * as THREE from \"three\";\r\nimport { useState } from \"react\";\r\nimport { LOOK_AT_PIZZA, PIZZA_FBX } from \"./constants\";\r\nimport { useCallback } from \"react\";\r\n\r\ntype Entity = THREE.Mesh | THREE.Group;\r\n\r\ntype Action =\r\n  | {\r\n      type: \"INIT\";\r\n      renderer: THREE.WebGLRenderer;\r\n      scene: THREE.Scene;\r\n      camera: THREE.PerspectiveCamera;\r\n      domElement: HTMLElement;\r\n      controls: OrbitControls;\r\n    }\r\n  | { type: \"ADD_ENITITIES\"; entities: Entity[] };\r\n\r\ntype Dispatch = (action: Action) => void;\r\n\r\ntype State = {\r\n  previousRAF: number | undefined;\r\n  renderer: THREE.WebGLRenderer | undefined;\r\n  scene: THREE.Scene | undefined;\r\n  domElement: HTMLElement | undefined;\r\n  camera: THREE.PerspectiveCamera | undefined;\r\n  controls: OrbitControls | undefined;\r\n  player: any;\r\n  entities: Array<Entity>;\r\n  sceneLoaded: boolean;\r\n  something: Array<any> | undefined;\r\n};\r\n\r\nconst initialState = {\r\n  previousRAF: undefined,\r\n  renderer: undefined,\r\n  scene: undefined,\r\n  camera: undefined,\r\n  controls: undefined,\r\n  domElement: undefined,\r\n  player: undefined,\r\n  entities: [],\r\n  sceneLoaded: false,\r\n  something: [],\r\n};\r\n\r\nconst ThreeContext = createContext<\r\n  { state: State; dispatch: Dispatch } | undefined\r\n>(undefined);\r\n\r\nconst reducer = (state: State, action: Action) => {\r\n  switch (action.type) {\r\n    case \"INIT\":\r\n      return {\r\n        ...state,\r\n        renderer: action.renderer,\r\n        scene: action.scene,\r\n        camera: action.camera,\r\n        sceneLoaded: true,\r\n        controls: action.controls,\r\n      };\r\n    case \"ADD_ENITITIES\":\r\n      return {\r\n        ...state,\r\n        entities: [...state.entities, ...action.entities],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst ThreeProvider = ({\r\n  children,\r\n}: {\r\n  children: JSX.Element | JSX.Element[];\r\n}) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const loadFBX = (path: string) => {\r\n    const loader = new FBXLoader();\r\n    loader.load(path, (object) => {\r\n      if (state.scene === undefined) {\r\n        return console.log(\"no scene\");\r\n      }\r\n      // This could be removed and they could just be loaded first\r\n      state.scene.add(object);\r\n\r\n      dispatch({ type: \"ADD_ENITITIES\", entities: [object] });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (state.scene) {\r\n      loadFBX(PIZZA_FBX);\r\n    }\r\n    //eslint-disable-next-line\r\n  }, [state.scene]);\r\n\r\n  const value = { state, dispatch };\r\n  return (\r\n    <ThreeContext.Provider value={value}>{children}</ThreeContext.Provider>\r\n  );\r\n};\r\n\r\nexport { ThreeContext, ThreeProvider };\r\n\r\nexport const useThreeScene = () => {\r\n  const [previousRAF, setPreviousRAF] = useState(0);\r\n  const context = useContext(ThreeContext);\r\n\r\n  if (context === undefined) {\r\n    throw new Error(\"Three Context error in ThreeScene hook\");\r\n  }\r\n\r\n  const { dispatch, state } = context;\r\n\r\n  const initScene = useCallback(() => {\r\n    const renderer = new THREE.WebGLRenderer();\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    const windowAspect = width / height;\r\n    renderer.setSize(width, height);\r\n    renderer.physicallyCorrectLights = true;\r\n    renderer.outputEncoding = THREE.sRGBEncoding;\r\n    const domElement = renderer.domElement;\r\n\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(65, windowAspect, 0.1, 1000);\r\n    const { x, y, z } = LOOK_AT_PIZZA;\r\n    camera.position.set(x, y, z);\r\n\r\n    const controls = new OrbitControls(camera, domElement);\r\n    controls.autoRotate = true;\r\n    controls.update();\r\n\r\n    const light = new THREE.HemisphereLight(0xffffbb, 0x080820, 0.5);\r\n    scene.add(light);\r\n\r\n    const ambient = new THREE.AmbientLight(0xfffff, 1);\r\n    scene.add(ambient);\r\n\r\n    const geometry = new THREE.BoxGeometry();\r\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\r\n    const cube = new THREE.Mesh(geometry, material);\r\n    scene.add(cube);\r\n\r\n    // const ground = new THREE.Mesh(\r\n    //   new THREE.PlaneGeometry(20000, 20000, 10, 10),\r\n    //   new THREE.MeshLambertMaterial({ color: 0xffffff })\r\n    // );\r\n    // ground.position.y = -1;\r\n    // ground.castShadow = false;\r\n    // ground.receiveShadow = true;\r\n    // ground.rotation.x = -Math.PI / 2;\r\n    // scene.add(ground);\r\n\r\n    dispatch({ type: \"INIT\", renderer, scene, camera, domElement, controls });\r\n\r\n    document.body.appendChild(domElement);\r\n  }, [dispatch]);\r\n\r\n  const step = (timeElapsed: number) => {\r\n    const timeElapsedS = Math.min(1.0, 30, timeElapsed * 0.001);\r\n    if (state.player) {\r\n      state.player.update(timeElapsedS);\r\n    }\r\n  };\r\n\r\n  const RAF = () => {\r\n    requestAnimationFrame((t) => {\r\n      if (state.renderer === undefined) {\r\n        return console.log(\"no renderer\");\r\n      }\r\n      if (state.scene === undefined) {\r\n        return console.log(\"no scene\");\r\n      }\r\n      if (state.camera === undefined) {\r\n        return console.log(\"no camera\");\r\n      }\r\n      if (state.sceneLoaded) {\r\n        const _previousRAF = previousRAF ? previousRAF : t;\r\n        step(t - _previousRAF);\r\n        state.renderer.render(state.scene, state.camera);\r\n        state.controls && state.controls.update();\r\n        setPreviousRAF(_previousRAF);\r\n      }\r\n      setTimeout(() => RAF(), 1);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (state.renderer) {\r\n      RAF();\r\n    }\r\n\r\n    return () =>\r\n      cancelAnimationFrame(state.previousRAF ? state.previousRAF : 0);\r\n    //eslint-disable-next-line\r\n  }, [state.renderer]);\r\n\r\n  return { initScene, RAF };\r\n};\r\n","import { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { useThreeScene } from \"./contexts/Three\";\r\n\r\nfunction App() {\r\n  const { initScene } = useThreeScene();\r\n  useEffect(() => {\r\n    console.log(\"shit\");\r\n    initScene();\r\n    // threeScene.RAF();\r\n  }, [initScene]);\r\n  return <div className=\"App\"></div>;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { ThreeProvider } from \"./contexts/Three\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThreeProvider>\r\n      <App />\r\n    </ThreeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}